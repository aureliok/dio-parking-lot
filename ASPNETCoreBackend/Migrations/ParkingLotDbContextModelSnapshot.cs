// <auto-generated />
using System;
using ASPNETCoreBackend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPNETCoreBackend.Migrations
{
    [DbContext(typeof(ParkingLotDbContext))]
    partial class ParkingLotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("parking_lot_system")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ASPNETCoreBackend.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 7, 23, 44, 39, 435, DateTimeKind.Utc).AddTicks(9428));

                    b.HasKey("ClientId");

                    b.ToTable("clients", "parking_lot_system");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.ParkingLot", b =>
                {
                    b.Property<int>("ParkingLotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ParkingLotId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceFirstHour")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PricePerAdditionalHour")
                        .HasColumnType("numeric");

                    b.HasKey("ParkingLotId");

                    b.ToTable("parking_lots", "parking_lot_system");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.ParkingLotActivity", b =>
                {
                    b.Property<int>("ParkingLotActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ParkingLotActivityId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParkingLotId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ParkingValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 7, 23, 44, 39, 435, DateTimeKind.Utc).AddTicks(9743));

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("ParkingLotActivityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ParkingLotId");

                    b.HasIndex("VehicleId");

                    b.ToTable("parking_lot_activities", "parking_lot_system");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParkingLotId")
                        .HasColumnType("integer");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("VehicleId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ParkingLotId");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("vehicles", "parking_lot_system");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.ParkingLotActivity", b =>
                {
                    b.HasOne("ASPNETCoreBackend.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNETCoreBackend.Entities.ParkingLot", "ParkingLot")
                        .WithMany()
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNETCoreBackend.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ParkingLot");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.Vehicle", b =>
                {
                    b.HasOne("ASPNETCoreBackend.Entities.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNETCoreBackend.Entities.ParkingLot", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("ParkingLotId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ASPNETCoreBackend.Entities.ParkingLot", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
